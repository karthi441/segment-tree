#include <bits/stdc++.h>
using namespace std;
// time complexity-> o(log n) for update and query
 //    but o(n) for build
 // space complexity ->o(n);
class sgtree{
    vector<int>  seg;
    public:
    sgtree(int n){
        seg.resize(4*n);
    }
void build(int idx,int low,int high,int a[]){
    if(low==high){
        seg[idx]=a[low];
        return ;
    }
    int mid=(low+high)>>1;
    build(2*idx+1,low,mid,a);
    build(2*idx+2,mid+1,high,a);
    seg[idx]=max(seg[2*idx+1],seg[2*idx+2]);
}
int query(int idx,int low,int high,int l,int r){
    // no overlap
    if(l>high || r<low) return INT_MIN;
    // complete overlap
    else if(low>=l && high<=r)return seg[idx];
     
         // partial overlap
         int mid=(low+high)>>1;
         int left=query(2*idx+1,low,mid,l,r);
         int right=query(2*idx+2,mid+1,high,l,r);
         return max(left,right);
     
}
void update(int idx,int low,int high,int i,int val){
    if(low==high){
        seg[idx]=val;
        return ;
    }
    int mid=(low+high)>>1;
    if(i<=mid)update(2*idx+1,low,mid,i,val);
    else update(2*idx+2,mid+1,high,i,val);
    seg[idx]=max(seg[2*idx+1],seg[2*idx+2]);
}};
int main() {
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)cin>>a[i];
    sgtree sg1(n);
    sg1.build(0,0,n-1,a);
    int q;
    cin>>q;
    // find
    // here l and r is according to 1 based indexing
    for(int i=0;i<q;i++){
        int l,r;
        cin>>l>>r;
        cout<<sg1.query(0,0,n-1,l-1,r-1)<<endl;
    }
    // update
    int uq;
    cin>>uq;
    // here pos is according to zero based indexing
    for(int i=0;i<uq;i++){
        int pos,val;
        cin>>pos>>val;
        sg1.update(0,0,n-1,pos,val);
        a[pos]=val;
    }
}
